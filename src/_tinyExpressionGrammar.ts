/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import { Variable, Const, Operand, TargetValue, FunctionOperand, buildBinaryOperand, UnaryOperand, BinaryOperand, ArrayOperand, EInstructionType } from "./libs";
* ---
* Root
*   := v=Expression $
*   .value= TargetValue {
*     return v.value
*   }
* Expression
*   := _ head=LogicOr tail={_ v1=OrSign _ v2=LogicOr}* _
*   .value= TargetValue {
*     return buildBinaryOperand(head, tail, true);
*   }
* LogicOr
*   := head=LogicAnd tail={_ v1=AndSign _ v2=LogicAnd}* 
*   .value= TargetValue {
*     return buildBinaryOperand(head, tail, true);
*   }
* LogicAnd
*   := head=CompOps tail={_ v1=ComparableOperators _ v2=CompOps}* 
*   .value= TargetValue {
*     return buildBinaryOperand(head, tail);
*   }
* CompOps
*   := head=PlusMinusOps tail={_ v1=PlusMinusSigns _ v2=PlusMinusOps}* 
*   .value= TargetValue {
*     return buildBinaryOperand(head, tail, true);
*   }
* PlusMinusOps
*   := head=MulDivOps tail={_ v1=MulDivSigns _ v2=MulDivOps}* 
*   .value= TargetValue {
*     return buildBinaryOperand(head, tail, true);
*   }
* MulDivOps
*   := head=BinaryFuncOp tail={_ v1=PowerSigns _ v2=BinaryFuncOp}* 
*   .value= TargetValue {
*     return buildBinaryOperand(head, tail, true);
*   }
* BinaryFuncOp
*   := head=Factor tail={_ v1=BinFunctions _ v2=Factor?}* 
*   .value = TargetValue {
*     return buildBinaryOperand(head, tail);
*   }
* BinFunctions
*   := v={'\*\=' | 'contains'i | 'contain'i} .value=EInstructionType { return EInstructionType.contains; }
*   |  v={'notcontains'i | 'notcontain'i}    .value=EInstructionType { return EInstructionType.notcontains; }
*   |  v={'anyof'i}                          .value=EInstructionType {return EInstructionType.anyof; }
*   |  v={'allof'i}                          .value=EInstructionType {return EInstructionType.allof; }
* Factor
*   := '\(' _ expr=Expression _ '\)' .value= any { return this.expr.value; }
*   | FunctionOp
*   | UnaryFunctionOp
*   | Atom
*   | ArrayOp
* FunctionOp
*   := name=LettersAndDigits '\(' params=Sequence '\)'
*   .value=FunctionOperand { 
*     const params = this.params.value
*     return new FunctionOperand(this.name.value, params); 
*   }
* UnaryFunctionOp
*   := {'\!' | 'negate'i} _ expr=Expression  .value=UnaryOperand { return new UnaryOperand(this.expr.value, EInstructionType.negate); }
*   | expr={Atom|ArrayOp} _ op=UnFunctions             .value=UnaryOperand { return new UnaryOperand(this.expr.value, this.op.value); }
* ArrayOp
*   := '\[' sequence=Sequence '\]'           .value= ArrayOperand { return sequence.value; }
* Sequence
*   := expr=Expression? tail={_ '\,' _ v=Expression}* 
*   .value= ArrayOperand {
*     if (expr == null)
*       return new ArrayOperand([]);
*     let array = [expr.value];
*     if (Array.isArray(tail)) {
*       array = array.concat(tail.map(itm => itm.v.value))
*     }
*     return new ArrayOperand(array);
*   }
* UnFunctions
*   := v='empty'i    .value=EInstructionType { return EInstructionType.empty; }
*   | v='notempty'i  .value=EInstructionType { return EInstructionType.notempty; }
* PowerSigns
*   := v={'\^' | 'power'} .value= EInstructionType { return EInstructionType.power; }
* MulDivSigns
*   := v='\*' .value= EInstructionType { return EInstructionType.mul; }
*   |  v='\/'  .value= EInstructionType { return EInstructionType.div; }
*   |  v='\%'  .value= EInstructionType { return EInstructionType.mod; }
* PlusMinusSigns
*   := v='\+' .value= EInstructionType { return EInstructionType.plus; }
*   |  v='\-' .value= EInstructionType { return EInstructionType.minus; }
* ComparableOperators
*   := v={'<=' | 'lessorequal'i}           .value= EInstructionType { return EInstructionType.lessorequal; }
*   |  v={'>=' | 'greaterorequal'i}        .value= EInstructionType { return EInstructionType.greaterorequal; }
*   |  v={'==' | 'equal'i}                 .value= EInstructionType { return EInstructionType.equal; }
*   |  v={'!=' | 'notequal'i}              .value= EInstructionType { return EInstructionType.notequal; }
*   |  v={'<' | 'less'i}                   .value= EInstructionType { return EInstructionType.less; }
*   |  v={'>' | 'greater'i}                .value= EInstructionType { return EInstructionType.greater; }
* AndSign
*   := v={'\&\&' | 'and'}    .value= EInstructionType { return EInstructionType.and; }
* OrSign
*   := v={'\|\|' | 'or'}     .value= EInstructionType { return EInstructionType.or; }
* Atom 
*   := _ v={'undefined' | 'null'} .value= null { return null; }
*   |  _ v=ConstValue             .value= Const { return new Const(v.value); }
*   |  _ '\{' v=ValueInput '\}'     .value= Variable { return new Variable(this.v.value); }
* ConstValue
*   := v=LogicValue           .value= boolean { return this.v.value; }
*   | v=ArithmeticValue       .value= number { return this.v.value; }
*   | v=LettersAndDigits      .value= string { return this.v.value; }
*   | v=StringValue           .value= string { return this.v.value; }
*   | v='\'\''                .value= string { return ''; }
*   | v='\"\"'                .value= string { return ''; }
* ArithmeticValue
*   := sign='[-]?' v=Number      .value= number { return this.sign === '-' ? -this.v.value : this.v.value; }
* LogicValue
*   := v='true'    .value= boolean { return true; }
*   |  v='false'   .value= boolean { return false; }
* ValueInput
*   := chars=ValueCharacters+ .value= string { return chars.map(itm=>itm.value).join(""); }
* ValueCharacters
*   := v='[^\{\}]' .value= string { return this.v; }
* Number
*   := v1=Digits '\.' v2=Digits     .value= number { return parseFloat(`${this.v1.value}.${this.v2.value}`); }
*   | v1=NonZeroDigits v2=Digits?   .value= number { return parseInt(this.v1.value.toString() + this.v2?.value?.toString() ?? ''); }
*   |'0x' v=HexDigits               .value= number { return parseInt(`0x${this.v.value}`, 16); } 
*   | v='0'                         .value= number { return 0; }
* StringValue
*   := StringQuoute v='[^\"\']+' StringQuoute         
*   .value= string {return this.v}
* LettersAndDigits
*   := v='[0-9a-zA-Z_]+'    .value= string {return this.v}
* HexDigits
*   := v='[0-9a-f]+'i       .value= string {return this.v}
* Digits
*   := v='[0-9]+'           .value= string {return this.v}
* NonZeroDigits
*   := v='[1-9]+'           .value= string {return this.v}
* StringQuoute
*   := v='[\"|\']'          .value= string {return '"'}
* // no use now
* // Letters
* //   := v='[a-zA-Z_]+'       .value= string {return this.v}
* _
*   := '[ \t\n\r]*'
*/

import { Variable, Const, Operand, TargetValue, FunctionOperand, buildBinaryOperand, UnaryOperand, BinaryOperand, ArrayOperand, EInstructionType } from "./libs";

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    Root = "Root",
    Expression = "Expression",
    Expression_$0 = "Expression_$0",
    LogicOr = "LogicOr",
    LogicOr_$0 = "LogicOr_$0",
    LogicAnd = "LogicAnd",
    LogicAnd_$0 = "LogicAnd_$0",
    CompOps = "CompOps",
    CompOps_$0 = "CompOps_$0",
    PlusMinusOps = "PlusMinusOps",
    PlusMinusOps_$0 = "PlusMinusOps_$0",
    MulDivOps = "MulDivOps",
    MulDivOps_$0 = "MulDivOps_$0",
    BinaryFuncOp = "BinaryFuncOp",
    BinaryFuncOp_$0 = "BinaryFuncOp_$0",
    BinFunctions_1 = "BinFunctions_1",
    BinFunctions_2 = "BinFunctions_2",
    BinFunctions_3 = "BinFunctions_3",
    BinFunctions_4 = "BinFunctions_4",
    BinFunctions_$0_1 = "BinFunctions_$0_1",
    BinFunctions_$0_2 = "BinFunctions_$0_2",
    BinFunctions_$0_3 = "BinFunctions_$0_3",
    BinFunctions_$1_1 = "BinFunctions_$1_1",
    BinFunctions_$1_2 = "BinFunctions_$1_2",
    BinFunctions_$2 = "BinFunctions_$2",
    BinFunctions_$3 = "BinFunctions_$3",
    Factor_1 = "Factor_1",
    Factor_2 = "Factor_2",
    Factor_3 = "Factor_3",
    Factor_4 = "Factor_4",
    Factor_5 = "Factor_5",
    FunctionOp = "FunctionOp",
    UnaryFunctionOp_1 = "UnaryFunctionOp_1",
    UnaryFunctionOp_2 = "UnaryFunctionOp_2",
    UnaryFunctionOp_$0_1 = "UnaryFunctionOp_$0_1",
    UnaryFunctionOp_$0_2 = "UnaryFunctionOp_$0_2",
    UnaryFunctionOp_$1_1 = "UnaryFunctionOp_$1_1",
    UnaryFunctionOp_$1_2 = "UnaryFunctionOp_$1_2",
    ArrayOp = "ArrayOp",
    Sequence = "Sequence",
    Sequence_$0 = "Sequence_$0",
    UnFunctions_1 = "UnFunctions_1",
    UnFunctions_2 = "UnFunctions_2",
    PowerSigns = "PowerSigns",
    PowerSigns_$0_1 = "PowerSigns_$0_1",
    PowerSigns_$0_2 = "PowerSigns_$0_2",
    MulDivSigns_1 = "MulDivSigns_1",
    MulDivSigns_2 = "MulDivSigns_2",
    MulDivSigns_3 = "MulDivSigns_3",
    PlusMinusSigns_1 = "PlusMinusSigns_1",
    PlusMinusSigns_2 = "PlusMinusSigns_2",
    ComparableOperators_1 = "ComparableOperators_1",
    ComparableOperators_2 = "ComparableOperators_2",
    ComparableOperators_3 = "ComparableOperators_3",
    ComparableOperators_4 = "ComparableOperators_4",
    ComparableOperators_5 = "ComparableOperators_5",
    ComparableOperators_6 = "ComparableOperators_6",
    ComparableOperators_$0_1 = "ComparableOperators_$0_1",
    ComparableOperators_$0_2 = "ComparableOperators_$0_2",
    ComparableOperators_$1_1 = "ComparableOperators_$1_1",
    ComparableOperators_$1_2 = "ComparableOperators_$1_2",
    ComparableOperators_$2_1 = "ComparableOperators_$2_1",
    ComparableOperators_$2_2 = "ComparableOperators_$2_2",
    ComparableOperators_$3_1 = "ComparableOperators_$3_1",
    ComparableOperators_$3_2 = "ComparableOperators_$3_2",
    ComparableOperators_$4_1 = "ComparableOperators_$4_1",
    ComparableOperators_$4_2 = "ComparableOperators_$4_2",
    ComparableOperators_$5_1 = "ComparableOperators_$5_1",
    ComparableOperators_$5_2 = "ComparableOperators_$5_2",
    AndSign = "AndSign",
    AndSign_$0_1 = "AndSign_$0_1",
    AndSign_$0_2 = "AndSign_$0_2",
    OrSign = "OrSign",
    OrSign_$0_1 = "OrSign_$0_1",
    OrSign_$0_2 = "OrSign_$0_2",
    Atom_1 = "Atom_1",
    Atom_2 = "Atom_2",
    Atom_3 = "Atom_3",
    Atom_$0_1 = "Atom_$0_1",
    Atom_$0_2 = "Atom_$0_2",
    ConstValue_1 = "ConstValue_1",
    ConstValue_2 = "ConstValue_2",
    ConstValue_3 = "ConstValue_3",
    ConstValue_4 = "ConstValue_4",
    ConstValue_5 = "ConstValue_5",
    ConstValue_6 = "ConstValue_6",
    ArithmeticValue = "ArithmeticValue",
    LogicValue_1 = "LogicValue_1",
    LogicValue_2 = "LogicValue_2",
    ValueInput = "ValueInput",
    ValueCharacters = "ValueCharacters",
    Number_1 = "Number_1",
    Number_2 = "Number_2",
    Number_3 = "Number_3",
    Number_4 = "Number_4",
    StringValue = "StringValue",
    LettersAndDigits = "LettersAndDigits",
    HexDigits = "HexDigits",
    Digits = "Digits",
    NonZeroDigits = "NonZeroDigits",
    StringQuoute = "StringQuoute",
    _ = "_",
    $EOF = "$EOF",
}
export class Root {
    public kind: ASTKinds.Root = ASTKinds.Root;
    public v: Expression;
    public value: TargetValue;
    constructor(v: Expression){
        this.v = v;
        this.value = ((): TargetValue => {
        return v.value
        })();
    }
}
export class Expression {
    public kind: ASTKinds.Expression = ASTKinds.Expression;
    public head: LogicOr;
    public tail: Expression_$0[];
    public value: TargetValue;
    constructor(head: LogicOr, tail: Expression_$0[]){
        this.head = head;
        this.tail = tail;
        this.value = ((): TargetValue => {
        return buildBinaryOperand(head, tail, true);
        })();
    }
}
export interface Expression_$0 {
    kind: ASTKinds.Expression_$0;
    v1: OrSign;
    v2: LogicOr;
}
export class LogicOr {
    public kind: ASTKinds.LogicOr = ASTKinds.LogicOr;
    public head: LogicAnd;
    public tail: LogicOr_$0[];
    public value: TargetValue;
    constructor(head: LogicAnd, tail: LogicOr_$0[]){
        this.head = head;
        this.tail = tail;
        this.value = ((): TargetValue => {
        return buildBinaryOperand(head, tail, true);
        })();
    }
}
export interface LogicOr_$0 {
    kind: ASTKinds.LogicOr_$0;
    v1: AndSign;
    v2: LogicAnd;
}
export class LogicAnd {
    public kind: ASTKinds.LogicAnd = ASTKinds.LogicAnd;
    public head: CompOps;
    public tail: LogicAnd_$0[];
    public value: TargetValue;
    constructor(head: CompOps, tail: LogicAnd_$0[]){
        this.head = head;
        this.tail = tail;
        this.value = ((): TargetValue => {
        return buildBinaryOperand(head, tail);
        })();
    }
}
export interface LogicAnd_$0 {
    kind: ASTKinds.LogicAnd_$0;
    v1: ComparableOperators;
    v2: CompOps;
}
export class CompOps {
    public kind: ASTKinds.CompOps = ASTKinds.CompOps;
    public head: PlusMinusOps;
    public tail: CompOps_$0[];
    public value: TargetValue;
    constructor(head: PlusMinusOps, tail: CompOps_$0[]){
        this.head = head;
        this.tail = tail;
        this.value = ((): TargetValue => {
        return buildBinaryOperand(head, tail, true);
        })();
    }
}
export interface CompOps_$0 {
    kind: ASTKinds.CompOps_$0;
    v1: PlusMinusSigns;
    v2: PlusMinusOps;
}
export class PlusMinusOps {
    public kind: ASTKinds.PlusMinusOps = ASTKinds.PlusMinusOps;
    public head: MulDivOps;
    public tail: PlusMinusOps_$0[];
    public value: TargetValue;
    constructor(head: MulDivOps, tail: PlusMinusOps_$0[]){
        this.head = head;
        this.tail = tail;
        this.value = ((): TargetValue => {
        return buildBinaryOperand(head, tail, true);
        })();
    }
}
export interface PlusMinusOps_$0 {
    kind: ASTKinds.PlusMinusOps_$0;
    v1: MulDivSigns;
    v2: MulDivOps;
}
export class MulDivOps {
    public kind: ASTKinds.MulDivOps = ASTKinds.MulDivOps;
    public head: BinaryFuncOp;
    public tail: MulDivOps_$0[];
    public value: TargetValue;
    constructor(head: BinaryFuncOp, tail: MulDivOps_$0[]){
        this.head = head;
        this.tail = tail;
        this.value = ((): TargetValue => {
        return buildBinaryOperand(head, tail, true);
        })();
    }
}
export interface MulDivOps_$0 {
    kind: ASTKinds.MulDivOps_$0;
    v1: PowerSigns;
    v2: BinaryFuncOp;
}
export class BinaryFuncOp {
    public kind: ASTKinds.BinaryFuncOp = ASTKinds.BinaryFuncOp;
    public head: Factor;
    public tail: BinaryFuncOp_$0[];
    public value: TargetValue;
    constructor(head: Factor, tail: BinaryFuncOp_$0[]){
        this.head = head;
        this.tail = tail;
        this.value = ((): TargetValue => {
        return buildBinaryOperand(head, tail);
        })();
    }
}
export interface BinaryFuncOp_$0 {
    kind: ASTKinds.BinaryFuncOp_$0;
    v1: BinFunctions;
    v2: Nullable<Factor>;
}
export type BinFunctions = BinFunctions_1 | BinFunctions_2 | BinFunctions_3 | BinFunctions_4;
export class BinFunctions_1 {
    public kind: ASTKinds.BinFunctions_1 = ASTKinds.BinFunctions_1;
    public v: BinFunctions_$0;
    public value: EInstructionType;
    constructor(v: BinFunctions_$0){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.contains;
        })();
    }
}
export class BinFunctions_2 {
    public kind: ASTKinds.BinFunctions_2 = ASTKinds.BinFunctions_2;
    public v: BinFunctions_$1;
    public value: EInstructionType;
    constructor(v: BinFunctions_$1){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.notcontains;
        })();
    }
}
export class BinFunctions_3 {
    public kind: ASTKinds.BinFunctions_3 = ASTKinds.BinFunctions_3;
    public v: BinFunctions_$2;
    public value: EInstructionType;
    constructor(v: BinFunctions_$2){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.anyof;
        })();
    }
}
export class BinFunctions_4 {
    public kind: ASTKinds.BinFunctions_4 = ASTKinds.BinFunctions_4;
    public v: BinFunctions_$3;
    public value: EInstructionType;
    constructor(v: BinFunctions_$3){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.allof;
        })();
    }
}
export type BinFunctions_$0 = BinFunctions_$0_1 | BinFunctions_$0_2 | BinFunctions_$0_3;
export type BinFunctions_$0_1 = string;
export type BinFunctions_$0_2 = string;
export type BinFunctions_$0_3 = string;
export type BinFunctions_$1 = BinFunctions_$1_1 | BinFunctions_$1_2;
export type BinFunctions_$1_1 = string;
export type BinFunctions_$1_2 = string;
export type BinFunctions_$2 = string;
export type BinFunctions_$3 = string;
export type Factor = Factor_1 | Factor_2 | Factor_3 | Factor_4 | Factor_5;
export class Factor_1 {
    public kind: ASTKinds.Factor_1 = ASTKinds.Factor_1;
    public expr: Expression;
    public value: any;
    constructor(expr: Expression){
        this.expr = expr;
        this.value = ((): any => {
        return this.expr.value;
        })();
    }
}
export type Factor_2 = FunctionOp;
export type Factor_3 = UnaryFunctionOp;
export type Factor_4 = Atom;
export type Factor_5 = ArrayOp;
export class FunctionOp {
    public kind: ASTKinds.FunctionOp = ASTKinds.FunctionOp;
    public name: LettersAndDigits;
    public params: Sequence;
    public value: FunctionOperand;
    constructor(name: LettersAndDigits, params: Sequence){
        this.name = name;
        this.params = params;
        this.value = ((): FunctionOperand => {
        const params = this.params.value
    return new FunctionOperand(this.name.value, params);
        })();
    }
}
export type UnaryFunctionOp = UnaryFunctionOp_1 | UnaryFunctionOp_2;
export class UnaryFunctionOp_1 {
    public kind: ASTKinds.UnaryFunctionOp_1 = ASTKinds.UnaryFunctionOp_1;
    public expr: Expression;
    public value: UnaryOperand;
    constructor(expr: Expression){
        this.expr = expr;
        this.value = ((): UnaryOperand => {
        return new UnaryOperand(this.expr.value, EInstructionType.negate);
        })();
    }
}
export class UnaryFunctionOp_2 {
    public kind: ASTKinds.UnaryFunctionOp_2 = ASTKinds.UnaryFunctionOp_2;
    public expr: UnaryFunctionOp_$1;
    public op: UnFunctions;
    public value: UnaryOperand;
    constructor(expr: UnaryFunctionOp_$1, op: UnFunctions){
        this.expr = expr;
        this.op = op;
        this.value = ((): UnaryOperand => {
        return new UnaryOperand(this.expr.value, this.op.value);
        })();
    }
}
export type UnaryFunctionOp_$0 = UnaryFunctionOp_$0_1 | UnaryFunctionOp_$0_2;
export type UnaryFunctionOp_$0_1 = string;
export type UnaryFunctionOp_$0_2 = string;
export type UnaryFunctionOp_$1 = UnaryFunctionOp_$1_1 | UnaryFunctionOp_$1_2;
export type UnaryFunctionOp_$1_1 = Atom;
export type UnaryFunctionOp_$1_2 = ArrayOp;
export class ArrayOp {
    public kind: ASTKinds.ArrayOp = ASTKinds.ArrayOp;
    public sequence: Sequence;
    public value: ArrayOperand;
    constructor(sequence: Sequence){
        this.sequence = sequence;
        this.value = ((): ArrayOperand => {
        return sequence.value;
        })();
    }
}
export class Sequence {
    public kind: ASTKinds.Sequence = ASTKinds.Sequence;
    public expr: Nullable<Expression>;
    public tail: Sequence_$0[];
    public value: ArrayOperand;
    constructor(expr: Nullable<Expression>, tail: Sequence_$0[]){
        this.expr = expr;
        this.tail = tail;
        this.value = ((): ArrayOperand => {
        if (expr == null)
      return new ArrayOperand([]);

    let array = [expr.value];
    if (Array.isArray(tail)) {
      array = array.concat(tail.map(itm => itm.v.value))
    }

    return new ArrayOperand(array);
        })();
    }
}
export interface Sequence_$0 {
    kind: ASTKinds.Sequence_$0;
    v: Expression;
}
export type UnFunctions = UnFunctions_1 | UnFunctions_2;
export class UnFunctions_1 {
    public kind: ASTKinds.UnFunctions_1 = ASTKinds.UnFunctions_1;
    public v: string;
    public value: EInstructionType;
    constructor(v: string){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.empty;
        })();
    }
}
export class UnFunctions_2 {
    public kind: ASTKinds.UnFunctions_2 = ASTKinds.UnFunctions_2;
    public v: string;
    public value: EInstructionType;
    constructor(v: string){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.notempty;
        })();
    }
}
export class PowerSigns {
    public kind: ASTKinds.PowerSigns = ASTKinds.PowerSigns;
    public v: PowerSigns_$0;
    public value: EInstructionType;
    constructor(v: PowerSigns_$0){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.power;
        })();
    }
}
export type PowerSigns_$0 = PowerSigns_$0_1 | PowerSigns_$0_2;
export type PowerSigns_$0_1 = string;
export type PowerSigns_$0_2 = string;
export type MulDivSigns = MulDivSigns_1 | MulDivSigns_2 | MulDivSigns_3;
export class MulDivSigns_1 {
    public kind: ASTKinds.MulDivSigns_1 = ASTKinds.MulDivSigns_1;
    public v: string;
    public value: EInstructionType;
    constructor(v: string){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.mul;
        })();
    }
}
export class MulDivSigns_2 {
    public kind: ASTKinds.MulDivSigns_2 = ASTKinds.MulDivSigns_2;
    public v: string;
    public value: EInstructionType;
    constructor(v: string){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.div;
        })();
    }
}
export class MulDivSigns_3 {
    public kind: ASTKinds.MulDivSigns_3 = ASTKinds.MulDivSigns_3;
    public v: string;
    public value: EInstructionType;
    constructor(v: string){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.mod;
        })();
    }
}
export type PlusMinusSigns = PlusMinusSigns_1 | PlusMinusSigns_2;
export class PlusMinusSigns_1 {
    public kind: ASTKinds.PlusMinusSigns_1 = ASTKinds.PlusMinusSigns_1;
    public v: string;
    public value: EInstructionType;
    constructor(v: string){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.plus;
        })();
    }
}
export class PlusMinusSigns_2 {
    public kind: ASTKinds.PlusMinusSigns_2 = ASTKinds.PlusMinusSigns_2;
    public v: string;
    public value: EInstructionType;
    constructor(v: string){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.minus;
        })();
    }
}
export type ComparableOperators = ComparableOperators_1 | ComparableOperators_2 | ComparableOperators_3 | ComparableOperators_4 | ComparableOperators_5 | ComparableOperators_6;
export class ComparableOperators_1 {
    public kind: ASTKinds.ComparableOperators_1 = ASTKinds.ComparableOperators_1;
    public v: ComparableOperators_$0;
    public value: EInstructionType;
    constructor(v: ComparableOperators_$0){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.lessorequal;
        })();
    }
}
export class ComparableOperators_2 {
    public kind: ASTKinds.ComparableOperators_2 = ASTKinds.ComparableOperators_2;
    public v: ComparableOperators_$1;
    public value: EInstructionType;
    constructor(v: ComparableOperators_$1){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.greaterorequal;
        })();
    }
}
export class ComparableOperators_3 {
    public kind: ASTKinds.ComparableOperators_3 = ASTKinds.ComparableOperators_3;
    public v: ComparableOperators_$2;
    public value: EInstructionType;
    constructor(v: ComparableOperators_$2){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.equal;
        })();
    }
}
export class ComparableOperators_4 {
    public kind: ASTKinds.ComparableOperators_4 = ASTKinds.ComparableOperators_4;
    public v: ComparableOperators_$3;
    public value: EInstructionType;
    constructor(v: ComparableOperators_$3){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.notequal;
        })();
    }
}
export class ComparableOperators_5 {
    public kind: ASTKinds.ComparableOperators_5 = ASTKinds.ComparableOperators_5;
    public v: ComparableOperators_$4;
    public value: EInstructionType;
    constructor(v: ComparableOperators_$4){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.less;
        })();
    }
}
export class ComparableOperators_6 {
    public kind: ASTKinds.ComparableOperators_6 = ASTKinds.ComparableOperators_6;
    public v: ComparableOperators_$5;
    public value: EInstructionType;
    constructor(v: ComparableOperators_$5){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.greater;
        })();
    }
}
export type ComparableOperators_$0 = ComparableOperators_$0_1 | ComparableOperators_$0_2;
export type ComparableOperators_$0_1 = string;
export type ComparableOperators_$0_2 = string;
export type ComparableOperators_$1 = ComparableOperators_$1_1 | ComparableOperators_$1_2;
export type ComparableOperators_$1_1 = string;
export type ComparableOperators_$1_2 = string;
export type ComparableOperators_$2 = ComparableOperators_$2_1 | ComparableOperators_$2_2;
export type ComparableOperators_$2_1 = string;
export type ComparableOperators_$2_2 = string;
export type ComparableOperators_$3 = ComparableOperators_$3_1 | ComparableOperators_$3_2;
export type ComparableOperators_$3_1 = string;
export type ComparableOperators_$3_2 = string;
export type ComparableOperators_$4 = ComparableOperators_$4_1 | ComparableOperators_$4_2;
export type ComparableOperators_$4_1 = string;
export type ComparableOperators_$4_2 = string;
export type ComparableOperators_$5 = ComparableOperators_$5_1 | ComparableOperators_$5_2;
export type ComparableOperators_$5_1 = string;
export type ComparableOperators_$5_2 = string;
export class AndSign {
    public kind: ASTKinds.AndSign = ASTKinds.AndSign;
    public v: AndSign_$0;
    public value: EInstructionType;
    constructor(v: AndSign_$0){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.and;
        })();
    }
}
export type AndSign_$0 = AndSign_$0_1 | AndSign_$0_2;
export type AndSign_$0_1 = string;
export type AndSign_$0_2 = string;
export class OrSign {
    public kind: ASTKinds.OrSign = ASTKinds.OrSign;
    public v: OrSign_$0;
    public value: EInstructionType;
    constructor(v: OrSign_$0){
        this.v = v;
        this.value = ((): EInstructionType => {
        return EInstructionType.or;
        })();
    }
}
export type OrSign_$0 = OrSign_$0_1 | OrSign_$0_2;
export type OrSign_$0_1 = string;
export type OrSign_$0_2 = string;
export type Atom = Atom_1 | Atom_2 | Atom_3;
export class Atom_1 {
    public kind: ASTKinds.Atom_1 = ASTKinds.Atom_1;
    public v: Atom_$0;
    public value: null;
    constructor(v: Atom_$0){
        this.v = v;
        this.value = ((): null => {
        return null;
        })();
    }
}
export class Atom_2 {
    public kind: ASTKinds.Atom_2 = ASTKinds.Atom_2;
    public v: ConstValue;
    public value: Const;
    constructor(v: ConstValue){
        this.v = v;
        this.value = ((): Const => {
        return new Const(v.value);
        })();
    }
}
export class Atom_3 {
    public kind: ASTKinds.Atom_3 = ASTKinds.Atom_3;
    public v: ValueInput;
    public value: Variable;
    constructor(v: ValueInput){
        this.v = v;
        this.value = ((): Variable => {
        return new Variable(this.v.value);
        })();
    }
}
export type Atom_$0 = Atom_$0_1 | Atom_$0_2;
export type Atom_$0_1 = string;
export type Atom_$0_2 = string;
export type ConstValue = ConstValue_1 | ConstValue_2 | ConstValue_3 | ConstValue_4 | ConstValue_5 | ConstValue_6;
export class ConstValue_1 {
    public kind: ASTKinds.ConstValue_1 = ASTKinds.ConstValue_1;
    public v: LogicValue;
    public value: boolean;
    constructor(v: LogicValue){
        this.v = v;
        this.value = ((): boolean => {
        return this.v.value;
        })();
    }
}
export class ConstValue_2 {
    public kind: ASTKinds.ConstValue_2 = ASTKinds.ConstValue_2;
    public v: ArithmeticValue;
    public value: number;
    constructor(v: ArithmeticValue){
        this.v = v;
        this.value = ((): number => {
        return this.v.value;
        })();
    }
}
export class ConstValue_3 {
    public kind: ASTKinds.ConstValue_3 = ASTKinds.ConstValue_3;
    public v: LettersAndDigits;
    public value: string;
    constructor(v: LettersAndDigits){
        this.v = v;
        this.value = ((): string => {
        return this.v.value;
        })();
    }
}
export class ConstValue_4 {
    public kind: ASTKinds.ConstValue_4 = ASTKinds.ConstValue_4;
    public v: StringValue;
    public value: string;
    constructor(v: StringValue){
        this.v = v;
        this.value = ((): string => {
        return this.v.value;
        })();
    }
}
export class ConstValue_5 {
    public kind: ASTKinds.ConstValue_5 = ASTKinds.ConstValue_5;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return '';
        })();
    }
}
export class ConstValue_6 {
    public kind: ASTKinds.ConstValue_6 = ASTKinds.ConstValue_6;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return '';
        })();
    }
}
export class ArithmeticValue {
    public kind: ASTKinds.ArithmeticValue = ASTKinds.ArithmeticValue;
    public sign: string;
    public v: Number;
    public value: number;
    constructor(sign: string, v: Number){
        this.sign = sign;
        this.v = v;
        this.value = ((): number => {
        return this.sign === '-' ? -this.v.value : this.v.value;
        })();
    }
}
export type LogicValue = LogicValue_1 | LogicValue_2;
export class LogicValue_1 {
    public kind: ASTKinds.LogicValue_1 = ASTKinds.LogicValue_1;
    public v: string;
    public value: boolean;
    constructor(v: string){
        this.v = v;
        this.value = ((): boolean => {
        return true;
        })();
    }
}
export class LogicValue_2 {
    public kind: ASTKinds.LogicValue_2 = ASTKinds.LogicValue_2;
    public v: string;
    public value: boolean;
    constructor(v: string){
        this.v = v;
        this.value = ((): boolean => {
        return false;
        })();
    }
}
export class ValueInput {
    public kind: ASTKinds.ValueInput = ASTKinds.ValueInput;
    public chars: [ValueCharacters, ...ValueCharacters[]];
    public value: string;
    constructor(chars: [ValueCharacters, ...ValueCharacters[]]){
        this.chars = chars;
        this.value = ((): string => {
        return chars.map(itm=>itm.value).join("");
        })();
    }
}
export class ValueCharacters {
    public kind: ASTKinds.ValueCharacters = ASTKinds.ValueCharacters;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return this.v;
        })();
    }
}
export type Number = Number_1 | Number_2 | Number_3 | Number_4;
export class Number_1 {
    public kind: ASTKinds.Number_1 = ASTKinds.Number_1;
    public v1: Digits;
    public v2: Digits;
    public value: number;
    constructor(v1: Digits, v2: Digits){
        this.v1 = v1;
        this.v2 = v2;
        this.value = ((): number => {
        return parseFloat(`${this.v1.value}.${this.v2.value}`);
        })();
    }
}
export class Number_2 {
    public kind: ASTKinds.Number_2 = ASTKinds.Number_2;
    public v1: NonZeroDigits;
    public v2: Nullable<Digits>;
    public value: number;
    constructor(v1: NonZeroDigits, v2: Nullable<Digits>){
        this.v1 = v1;
        this.v2 = v2;
        this.value = ((): number => {
        return parseInt(this.v1.value.toString() + this.v2?.value?.toString() ?? '');
        })();
    }
}
export class Number_3 {
    public kind: ASTKinds.Number_3 = ASTKinds.Number_3;
    public v: HexDigits;
    public value: number;
    constructor(v: HexDigits){
        this.v = v;
        this.value = ((): number => {
        return parseInt(`0x${this.v.value}`, 16);
        })();
    }
}
export class Number_4 {
    public kind: ASTKinds.Number_4 = ASTKinds.Number_4;
    public v: string;
    public value: number;
    constructor(v: string){
        this.v = v;
        this.value = ((): number => {
        return 0;
        })();
    }
}
export class StringValue {
    public kind: ASTKinds.StringValue = ASTKinds.StringValue;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return this.v
        })();
    }
}
export class LettersAndDigits {
    public kind: ASTKinds.LettersAndDigits = ASTKinds.LettersAndDigits;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return this.v
        })();
    }
}
export class HexDigits {
    public kind: ASTKinds.HexDigits = ASTKinds.HexDigits;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return this.v
        })();
    }
}
export class Digits {
    public kind: ASTKinds.Digits = ASTKinds.Digits;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return this.v
        })();
    }
}
export class NonZeroDigits {
    public kind: ASTKinds.NonZeroDigits = ASTKinds.NonZeroDigits;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return this.v
        })();
    }
}
export class StringQuoute {
    public kind: ASTKinds.StringQuoute = ASTKinds.StringQuoute;
    public v: string;
    public value: string;
    constructor(v: string){
        this.v = v;
        this.value = ((): string => {
        return '"'
        })();
    }
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$Root$memo.clear();
        this.$scope$Expression$memo.clear();
        this.$scope$Expression_$0$memo.clear();
        this.$scope$LogicOr$memo.clear();
        this.$scope$LogicOr_$0$memo.clear();
        this.$scope$LogicAnd$memo.clear();
        this.$scope$LogicAnd_$0$memo.clear();
        this.$scope$CompOps$memo.clear();
        this.$scope$CompOps_$0$memo.clear();
        this.$scope$PlusMinusOps$memo.clear();
        this.$scope$PlusMinusOps_$0$memo.clear();
        this.$scope$MulDivOps$memo.clear();
        this.$scope$MulDivOps_$0$memo.clear();
        this.$scope$BinaryFuncOp$memo.clear();
        this.$scope$BinaryFuncOp_$0$memo.clear();
        this.$scope$BinFunctions$memo.clear();
        this.$scope$BinFunctions_$0$memo.clear();
        this.$scope$BinFunctions_$1$memo.clear();
        this.$scope$BinFunctions_$2$memo.clear();
        this.$scope$BinFunctions_$3$memo.clear();
        this.$scope$Factor$memo.clear();
        this.$scope$FunctionOp$memo.clear();
        this.$scope$UnaryFunctionOp$memo.clear();
        this.$scope$UnaryFunctionOp_$0$memo.clear();
        this.$scope$UnaryFunctionOp_$1$memo.clear();
        this.$scope$ArrayOp$memo.clear();
        this.$scope$Sequence$memo.clear();
        this.$scope$Sequence_$0$memo.clear();
        this.$scope$UnFunctions$memo.clear();
        this.$scope$PowerSigns$memo.clear();
        this.$scope$PowerSigns_$0$memo.clear();
        this.$scope$MulDivSigns$memo.clear();
        this.$scope$PlusMinusSigns$memo.clear();
        this.$scope$ComparableOperators$memo.clear();
        this.$scope$ComparableOperators_$0$memo.clear();
        this.$scope$ComparableOperators_$1$memo.clear();
        this.$scope$ComparableOperators_$2$memo.clear();
        this.$scope$ComparableOperators_$3$memo.clear();
        this.$scope$ComparableOperators_$4$memo.clear();
        this.$scope$ComparableOperators_$5$memo.clear();
        this.$scope$AndSign$memo.clear();
        this.$scope$AndSign_$0$memo.clear();
        this.$scope$OrSign$memo.clear();
        this.$scope$OrSign_$0$memo.clear();
        this.$scope$Atom$memo.clear();
        this.$scope$Atom_$0$memo.clear();
        this.$scope$ConstValue$memo.clear();
        this.$scope$ArithmeticValue$memo.clear();
        this.$scope$LogicValue$memo.clear();
        this.$scope$ValueInput$memo.clear();
        this.$scope$ValueCharacters$memo.clear();
        this.$scope$Number$memo.clear();
        this.$scope$StringValue$memo.clear();
        this.$scope$LettersAndDigits$memo.clear();
        this.$scope$HexDigits$memo.clear();
        this.$scope$Digits$memo.clear();
        this.$scope$NonZeroDigits$memo.clear();
        this.$scope$StringQuoute$memo.clear();
        this.$scope$_$memo.clear();
    }
    protected $scope$Root$memo: Map<number, [Nullable<Root>, PosInfo]> = new Map();
    protected $scope$Expression$memo: Map<number, [Nullable<Expression>, PosInfo]> = new Map();
    protected $scope$Expression_$0$memo: Map<number, [Nullable<Expression_$0>, PosInfo]> = new Map();
    protected $scope$LogicOr$memo: Map<number, [Nullable<LogicOr>, PosInfo]> = new Map();
    protected $scope$LogicOr_$0$memo: Map<number, [Nullable<LogicOr_$0>, PosInfo]> = new Map();
    protected $scope$LogicAnd$memo: Map<number, [Nullable<LogicAnd>, PosInfo]> = new Map();
    protected $scope$LogicAnd_$0$memo: Map<number, [Nullable<LogicAnd_$0>, PosInfo]> = new Map();
    protected $scope$CompOps$memo: Map<number, [Nullable<CompOps>, PosInfo]> = new Map();
    protected $scope$CompOps_$0$memo: Map<number, [Nullable<CompOps_$0>, PosInfo]> = new Map();
    protected $scope$PlusMinusOps$memo: Map<number, [Nullable<PlusMinusOps>, PosInfo]> = new Map();
    protected $scope$PlusMinusOps_$0$memo: Map<number, [Nullable<PlusMinusOps_$0>, PosInfo]> = new Map();
    protected $scope$MulDivOps$memo: Map<number, [Nullable<MulDivOps>, PosInfo]> = new Map();
    protected $scope$MulDivOps_$0$memo: Map<number, [Nullable<MulDivOps_$0>, PosInfo]> = new Map();
    protected $scope$BinaryFuncOp$memo: Map<number, [Nullable<BinaryFuncOp>, PosInfo]> = new Map();
    protected $scope$BinaryFuncOp_$0$memo: Map<number, [Nullable<BinaryFuncOp_$0>, PosInfo]> = new Map();
    protected $scope$BinFunctions$memo: Map<number, [Nullable<BinFunctions>, PosInfo]> = new Map();
    protected $scope$BinFunctions_$0$memo: Map<number, [Nullable<BinFunctions_$0>, PosInfo]> = new Map();
    protected $scope$BinFunctions_$1$memo: Map<number, [Nullable<BinFunctions_$1>, PosInfo]> = new Map();
    protected $scope$BinFunctions_$2$memo: Map<number, [Nullable<BinFunctions_$2>, PosInfo]> = new Map();
    protected $scope$BinFunctions_$3$memo: Map<number, [Nullable<BinFunctions_$3>, PosInfo]> = new Map();
    protected $scope$Factor$memo: Map<number, [Nullable<Factor>, PosInfo]> = new Map();
    protected $scope$FunctionOp$memo: Map<number, [Nullable<FunctionOp>, PosInfo]> = new Map();
    protected $scope$UnaryFunctionOp$memo: Map<number, [Nullable<UnaryFunctionOp>, PosInfo]> = new Map();
    protected $scope$UnaryFunctionOp_$0$memo: Map<number, [Nullable<UnaryFunctionOp_$0>, PosInfo]> = new Map();
    protected $scope$UnaryFunctionOp_$1$memo: Map<number, [Nullable<UnaryFunctionOp_$1>, PosInfo]> = new Map();
    protected $scope$ArrayOp$memo: Map<number, [Nullable<ArrayOp>, PosInfo]> = new Map();
    protected $scope$Sequence$memo: Map<number, [Nullable<Sequence>, PosInfo]> = new Map();
    protected $scope$Sequence_$0$memo: Map<number, [Nullable<Sequence_$0>, PosInfo]> = new Map();
    protected $scope$UnFunctions$memo: Map<number, [Nullable<UnFunctions>, PosInfo]> = new Map();
    protected $scope$PowerSigns$memo: Map<number, [Nullable<PowerSigns>, PosInfo]> = new Map();
    protected $scope$PowerSigns_$0$memo: Map<number, [Nullable<PowerSigns_$0>, PosInfo]> = new Map();
    protected $scope$MulDivSigns$memo: Map<number, [Nullable<MulDivSigns>, PosInfo]> = new Map();
    protected $scope$PlusMinusSigns$memo: Map<number, [Nullable<PlusMinusSigns>, PosInfo]> = new Map();
    protected $scope$ComparableOperators$memo: Map<number, [Nullable<ComparableOperators>, PosInfo]> = new Map();
    protected $scope$ComparableOperators_$0$memo: Map<number, [Nullable<ComparableOperators_$0>, PosInfo]> = new Map();
    protected $scope$ComparableOperators_$1$memo: Map<number, [Nullable<ComparableOperators_$1>, PosInfo]> = new Map();
    protected $scope$ComparableOperators_$2$memo: Map<number, [Nullable<ComparableOperators_$2>, PosInfo]> = new Map();
    protected $scope$ComparableOperators_$3$memo: Map<number, [Nullable<ComparableOperators_$3>, PosInfo]> = new Map();
    protected $scope$ComparableOperators_$4$memo: Map<number, [Nullable<ComparableOperators_$4>, PosInfo]> = new Map();
    protected $scope$ComparableOperators_$5$memo: Map<number, [Nullable<ComparableOperators_$5>, PosInfo]> = new Map();
    protected $scope$AndSign$memo: Map<number, [Nullable<AndSign>, PosInfo]> = new Map();
    protected $scope$AndSign_$0$memo: Map<number, [Nullable<AndSign_$0>, PosInfo]> = new Map();
    protected $scope$OrSign$memo: Map<number, [Nullable<OrSign>, PosInfo]> = new Map();
    protected $scope$OrSign_$0$memo: Map<number, [Nullable<OrSign_$0>, PosInfo]> = new Map();
    protected $scope$Atom$memo: Map<number, [Nullable<Atom>, PosInfo]> = new Map();
    protected $scope$Atom_$0$memo: Map<number, [Nullable<Atom_$0>, PosInfo]> = new Map();
    protected $scope$ConstValue$memo: Map<number, [Nullable<ConstValue>, PosInfo]> = new Map();
    protected $scope$ArithmeticValue$memo: Map<number, [Nullable<ArithmeticValue>, PosInfo]> = new Map();
    protected $scope$LogicValue$memo: Map<number, [Nullable<LogicValue>, PosInfo]> = new Map();
    protected $scope$ValueInput$memo: Map<number, [Nullable<ValueInput>, PosInfo]> = new Map();
    protected $scope$ValueCharacters$memo: Map<number, [Nullable<ValueCharacters>, PosInfo]> = new Map();
    protected $scope$Number$memo: Map<number, [Nullable<Number>, PosInfo]> = new Map();
    protected $scope$StringValue$memo: Map<number, [Nullable<StringValue>, PosInfo]> = new Map();
    protected $scope$LettersAndDigits$memo: Map<number, [Nullable<LettersAndDigits>, PosInfo]> = new Map();
    protected $scope$HexDigits$memo: Map<number, [Nullable<HexDigits>, PosInfo]> = new Map();
    protected $scope$Digits$memo: Map<number, [Nullable<Digits>, PosInfo]> = new Map();
    protected $scope$NonZeroDigits$memo: Map<number, [Nullable<NonZeroDigits>, PosInfo]> = new Map();
    protected $scope$StringQuoute$memo: Map<number, [Nullable<StringQuoute>, PosInfo]> = new Map();
    protected $scope$_$memo: Map<number, [Nullable<_>, PosInfo]> = new Map();
    public matchRoot($$dpth: number, $$cr?: ErrorTracker): Nullable<Root> {
        return this.memoise(
            () => {
                return this.run<Root>($$dpth,
                    () => {
                        let $scope$v: Nullable<Expression>;
                        let $$res: Nullable<Root> = null;
                        if (true
                            && ($scope$v = this.matchExpression($$dpth + 1, $$cr)) !== null
                            && this.match$EOF($$cr) !== null
                        ) {
                            $$res = new Root($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$Root$memo,
        );
    }
    public matchExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression> {
        return this.memoise(
            () => {
                return this.run<Expression>($$dpth,
                    () => {
                        let $scope$head: Nullable<LogicOr>;
                        let $scope$tail: Nullable<Expression_$0[]>;
                        let $$res: Nullable<Expression> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$head = this.matchLogicOr($$dpth + 1, $$cr)) !== null
                            && ($scope$tail = this.loop<Expression_$0>(() => this.matchExpression_$0($$dpth + 1, $$cr), 0, -1)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new Expression($scope$head, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$Expression$memo,
        );
    }
    public matchExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_$0> {
        return this.memoise(
            () => {
                return this.run<Expression_$0>($$dpth,
                    () => {
                        let $scope$v1: Nullable<OrSign>;
                        let $scope$v2: Nullable<LogicOr>;
                        let $$res: Nullable<Expression_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v1 = this.matchOrSign($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v2 = this.matchLogicOr($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.Expression_$0, v1: $scope$v1, v2: $scope$v2};
                        }
                        return $$res;
                    });
            },
            this.$scope$Expression_$0$memo,
        );
    }
    public matchLogicOr($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicOr> {
        return this.memoise(
            () => {
                return this.run<LogicOr>($$dpth,
                    () => {
                        let $scope$head: Nullable<LogicAnd>;
                        let $scope$tail: Nullable<LogicOr_$0[]>;
                        let $$res: Nullable<LogicOr> = null;
                        if (true
                            && ($scope$head = this.matchLogicAnd($$dpth + 1, $$cr)) !== null
                            && ($scope$tail = this.loop<LogicOr_$0>(() => this.matchLogicOr_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new LogicOr($scope$head, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$LogicOr$memo,
        );
    }
    public matchLogicOr_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicOr_$0> {
        return this.memoise(
            () => {
                return this.run<LogicOr_$0>($$dpth,
                    () => {
                        let $scope$v1: Nullable<AndSign>;
                        let $scope$v2: Nullable<LogicAnd>;
                        let $$res: Nullable<LogicOr_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v1 = this.matchAndSign($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v2 = this.matchLogicAnd($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.LogicOr_$0, v1: $scope$v1, v2: $scope$v2};
                        }
                        return $$res;
                    });
            },
            this.$scope$LogicOr_$0$memo,
        );
    }
    public matchLogicAnd($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicAnd> {
        return this.memoise(
            () => {
                return this.run<LogicAnd>($$dpth,
                    () => {
                        let $scope$head: Nullable<CompOps>;
                        let $scope$tail: Nullable<LogicAnd_$0[]>;
                        let $$res: Nullable<LogicAnd> = null;
                        if (true
                            && ($scope$head = this.matchCompOps($$dpth + 1, $$cr)) !== null
                            && ($scope$tail = this.loop<LogicAnd_$0>(() => this.matchLogicAnd_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new LogicAnd($scope$head, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$LogicAnd$memo,
        );
    }
    public matchLogicAnd_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicAnd_$0> {
        return this.memoise(
            () => {
                return this.run<LogicAnd_$0>($$dpth,
                    () => {
                        let $scope$v1: Nullable<ComparableOperators>;
                        let $scope$v2: Nullable<CompOps>;
                        let $$res: Nullable<LogicAnd_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v1 = this.matchComparableOperators($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v2 = this.matchCompOps($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.LogicAnd_$0, v1: $scope$v1, v2: $scope$v2};
                        }
                        return $$res;
                    });
            },
            this.$scope$LogicAnd_$0$memo,
        );
    }
    public matchCompOps($$dpth: number, $$cr?: ErrorTracker): Nullable<CompOps> {
        return this.memoise(
            () => {
                return this.run<CompOps>($$dpth,
                    () => {
                        let $scope$head: Nullable<PlusMinusOps>;
                        let $scope$tail: Nullable<CompOps_$0[]>;
                        let $$res: Nullable<CompOps> = null;
                        if (true
                            && ($scope$head = this.matchPlusMinusOps($$dpth + 1, $$cr)) !== null
                            && ($scope$tail = this.loop<CompOps_$0>(() => this.matchCompOps_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new CompOps($scope$head, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$CompOps$memo,
        );
    }
    public matchCompOps_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CompOps_$0> {
        return this.memoise(
            () => {
                return this.run<CompOps_$0>($$dpth,
                    () => {
                        let $scope$v1: Nullable<PlusMinusSigns>;
                        let $scope$v2: Nullable<PlusMinusOps>;
                        let $$res: Nullable<CompOps_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v1 = this.matchPlusMinusSigns($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v2 = this.matchPlusMinusOps($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.CompOps_$0, v1: $scope$v1, v2: $scope$v2};
                        }
                        return $$res;
                    });
            },
            this.$scope$CompOps_$0$memo,
        );
    }
    public matchPlusMinusOps($$dpth: number, $$cr?: ErrorTracker): Nullable<PlusMinusOps> {
        return this.memoise(
            () => {
                return this.run<PlusMinusOps>($$dpth,
                    () => {
                        let $scope$head: Nullable<MulDivOps>;
                        let $scope$tail: Nullable<PlusMinusOps_$0[]>;
                        let $$res: Nullable<PlusMinusOps> = null;
                        if (true
                            && ($scope$head = this.matchMulDivOps($$dpth + 1, $$cr)) !== null
                            && ($scope$tail = this.loop<PlusMinusOps_$0>(() => this.matchPlusMinusOps_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new PlusMinusOps($scope$head, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$PlusMinusOps$memo,
        );
    }
    public matchPlusMinusOps_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<PlusMinusOps_$0> {
        return this.memoise(
            () => {
                return this.run<PlusMinusOps_$0>($$dpth,
                    () => {
                        let $scope$v1: Nullable<MulDivSigns>;
                        let $scope$v2: Nullable<MulDivOps>;
                        let $$res: Nullable<PlusMinusOps_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v1 = this.matchMulDivSigns($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v2 = this.matchMulDivOps($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.PlusMinusOps_$0, v1: $scope$v1, v2: $scope$v2};
                        }
                        return $$res;
                    });
            },
            this.$scope$PlusMinusOps_$0$memo,
        );
    }
    public matchMulDivOps($$dpth: number, $$cr?: ErrorTracker): Nullable<MulDivOps> {
        return this.memoise(
            () => {
                return this.run<MulDivOps>($$dpth,
                    () => {
                        let $scope$head: Nullable<BinaryFuncOp>;
                        let $scope$tail: Nullable<MulDivOps_$0[]>;
                        let $$res: Nullable<MulDivOps> = null;
                        if (true
                            && ($scope$head = this.matchBinaryFuncOp($$dpth + 1, $$cr)) !== null
                            && ($scope$tail = this.loop<MulDivOps_$0>(() => this.matchMulDivOps_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new MulDivOps($scope$head, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$MulDivOps$memo,
        );
    }
    public matchMulDivOps_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<MulDivOps_$0> {
        return this.memoise(
            () => {
                return this.run<MulDivOps_$0>($$dpth,
                    () => {
                        let $scope$v1: Nullable<PowerSigns>;
                        let $scope$v2: Nullable<BinaryFuncOp>;
                        let $$res: Nullable<MulDivOps_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v1 = this.matchPowerSigns($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v2 = this.matchBinaryFuncOp($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.MulDivOps_$0, v1: $scope$v1, v2: $scope$v2};
                        }
                        return $$res;
                    });
            },
            this.$scope$MulDivOps_$0$memo,
        );
    }
    public matchBinaryFuncOp($$dpth: number, $$cr?: ErrorTracker): Nullable<BinaryFuncOp> {
        return this.memoise(
            () => {
                return this.run<BinaryFuncOp>($$dpth,
                    () => {
                        let $scope$head: Nullable<Factor>;
                        let $scope$tail: Nullable<BinaryFuncOp_$0[]>;
                        let $$res: Nullable<BinaryFuncOp> = null;
                        if (true
                            && ($scope$head = this.matchFactor($$dpth + 1, $$cr)) !== null
                            && ($scope$tail = this.loop<BinaryFuncOp_$0>(() => this.matchBinaryFuncOp_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new BinaryFuncOp($scope$head, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$BinaryFuncOp$memo,
        );
    }
    public matchBinaryFuncOp_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<BinaryFuncOp_$0> {
        return this.memoise(
            () => {
                return this.run<BinaryFuncOp_$0>($$dpth,
                    () => {
                        let $scope$v1: Nullable<BinFunctions>;
                        let $scope$v2: Nullable<Nullable<Factor>>;
                        let $$res: Nullable<BinaryFuncOp_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v1 = this.matchBinFunctions($$dpth + 1, $$cr)) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && (($scope$v2 = this.matchFactor($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.BinaryFuncOp_$0, v1: $scope$v1, v2: $scope$v2};
                        }
                        return $$res;
                    });
            },
            this.$scope$BinaryFuncOp_$0$memo,
        );
    }
    public matchBinFunctions($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions> {
        return this.memoise(
            () => {
                return this.choice<BinFunctions>([
                    () => this.matchBinFunctions_1($$dpth + 1, $$cr),
                    () => this.matchBinFunctions_2($$dpth + 1, $$cr),
                    () => this.matchBinFunctions_3($$dpth + 1, $$cr),
                    () => this.matchBinFunctions_4($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$BinFunctions$memo,
        );
    }
    public matchBinFunctions_1($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_1> {
        return this.run<BinFunctions_1>($$dpth,
            () => {
                let $scope$v: Nullable<BinFunctions_$0>;
                let $$res: Nullable<BinFunctions_1> = null;
                if (true
                    && ($scope$v = this.matchBinFunctions_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new BinFunctions_1($scope$v);
                }
                return $$res;
            });
    }
    public matchBinFunctions_2($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_2> {
        return this.run<BinFunctions_2>($$dpth,
            () => {
                let $scope$v: Nullable<BinFunctions_$1>;
                let $$res: Nullable<BinFunctions_2> = null;
                if (true
                    && ($scope$v = this.matchBinFunctions_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new BinFunctions_2($scope$v);
                }
                return $$res;
            });
    }
    public matchBinFunctions_3($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_3> {
        return this.run<BinFunctions_3>($$dpth,
            () => {
                let $scope$v: Nullable<BinFunctions_$2>;
                let $$res: Nullable<BinFunctions_3> = null;
                if (true
                    && ($scope$v = this.matchBinFunctions_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new BinFunctions_3($scope$v);
                }
                return $$res;
            });
    }
    public matchBinFunctions_4($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_4> {
        return this.run<BinFunctions_4>($$dpth,
            () => {
                let $scope$v: Nullable<BinFunctions_$3>;
                let $$res: Nullable<BinFunctions_4> = null;
                if (true
                    && ($scope$v = this.matchBinFunctions_$3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new BinFunctions_4($scope$v);
                }
                return $$res;
            });
    }
    public matchBinFunctions_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$0> {
        return this.memoise(
            () => {
                return this.choice<BinFunctions_$0>([
                    () => this.matchBinFunctions_$0_1($$dpth + 1, $$cr),
                    () => this.matchBinFunctions_$0_2($$dpth + 1, $$cr),
                    () => this.matchBinFunctions_$0_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$BinFunctions_$0$memo,
        );
    }
    public matchBinFunctions_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$0_1> {
        return this.regexAccept(String.raw`(?:\*\=)`, "", $$dpth + 1, $$cr);
    }
    public matchBinFunctions_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$0_2> {
        return this.regexAccept(String.raw`(?:contains)`, "i", $$dpth + 1, $$cr);
    }
    public matchBinFunctions_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$0_3> {
        return this.regexAccept(String.raw`(?:contain)`, "i", $$dpth + 1, $$cr);
    }
    public matchBinFunctions_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$1> {
        return this.memoise(
            () => {
                return this.choice<BinFunctions_$1>([
                    () => this.matchBinFunctions_$1_1($$dpth + 1, $$cr),
                    () => this.matchBinFunctions_$1_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$BinFunctions_$1$memo,
        );
    }
    public matchBinFunctions_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$1_1> {
        return this.regexAccept(String.raw`(?:notcontains)`, "i", $$dpth + 1, $$cr);
    }
    public matchBinFunctions_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$1_2> {
        return this.regexAccept(String.raw`(?:notcontain)`, "i", $$dpth + 1, $$cr);
    }
    public matchBinFunctions_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$2> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:anyof)`, "i", $$dpth + 1, $$cr);
            },
            this.$scope$BinFunctions_$2$memo,
        );
    }
    public matchBinFunctions_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<BinFunctions_$3> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:allof)`, "i", $$dpth + 1, $$cr);
            },
            this.$scope$BinFunctions_$3$memo,
        );
    }
    public matchFactor($$dpth: number, $$cr?: ErrorTracker): Nullable<Factor> {
        return this.memoise(
            () => {
                return this.choice<Factor>([
                    () => this.matchFactor_1($$dpth + 1, $$cr),
                    () => this.matchFactor_2($$dpth + 1, $$cr),
                    () => this.matchFactor_3($$dpth + 1, $$cr),
                    () => this.matchFactor_4($$dpth + 1, $$cr),
                    () => this.matchFactor_5($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Factor$memo,
        );
    }
    public matchFactor_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Factor_1> {
        return this.run<Factor_1>($$dpth,
            () => {
                let $scope$expr: Nullable<Expression>;
                let $$res: Nullable<Factor_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new Factor_1($scope$expr);
                }
                return $$res;
            });
    }
    public matchFactor_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Factor_2> {
        return this.matchFunctionOp($$dpth + 1, $$cr);
    }
    public matchFactor_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Factor_3> {
        return this.matchUnaryFunctionOp($$dpth + 1, $$cr);
    }
    public matchFactor_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Factor_4> {
        return this.matchAtom($$dpth + 1, $$cr);
    }
    public matchFactor_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Factor_5> {
        return this.matchArrayOp($$dpth + 1, $$cr);
    }
    public matchFunctionOp($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionOp> {
        return this.memoise(
            () => {
                return this.run<FunctionOp>($$dpth,
                    () => {
                        let $scope$name: Nullable<LettersAndDigits>;
                        let $scope$params: Nullable<Sequence>;
                        let $$res: Nullable<FunctionOp> = null;
                        if (true
                            && ($scope$name = this.matchLettersAndDigits($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                            && ($scope$params = this.matchSequence($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new FunctionOp($scope$name, $scope$params);
                        }
                        return $$res;
                    });
            },
            this.$scope$FunctionOp$memo,
        );
    }
    public matchUnaryFunctionOp($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp> {
        return this.memoise(
            () => {
                return this.choice<UnaryFunctionOp>([
                    () => this.matchUnaryFunctionOp_1($$dpth + 1, $$cr),
                    () => this.matchUnaryFunctionOp_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$UnaryFunctionOp$memo,
        );
    }
    public matchUnaryFunctionOp_1($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_1> {
        return this.run<UnaryFunctionOp_1>($$dpth,
            () => {
                let $scope$expr: Nullable<Expression>;
                let $$res: Nullable<UnaryFunctionOp_1> = null;
                if (true
                    && this.matchUnaryFunctionOp_$0($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new UnaryFunctionOp_1($scope$expr);
                }
                return $$res;
            });
    }
    public matchUnaryFunctionOp_2($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_2> {
        return this.run<UnaryFunctionOp_2>($$dpth,
            () => {
                let $scope$expr: Nullable<UnaryFunctionOp_$1>;
                let $scope$op: Nullable<UnFunctions>;
                let $$res: Nullable<UnaryFunctionOp_2> = null;
                if (true
                    && ($scope$expr = this.matchUnaryFunctionOp_$1($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$op = this.matchUnFunctions($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new UnaryFunctionOp_2($scope$expr, $scope$op);
                }
                return $$res;
            });
    }
    public matchUnaryFunctionOp_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_$0> {
        return this.memoise(
            () => {
                return this.choice<UnaryFunctionOp_$0>([
                    () => this.matchUnaryFunctionOp_$0_1($$dpth + 1, $$cr),
                    () => this.matchUnaryFunctionOp_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$UnaryFunctionOp_$0$memo,
        );
    }
    public matchUnaryFunctionOp_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_$0_1> {
        return this.regexAccept(String.raw`(?:\!)`, "", $$dpth + 1, $$cr);
    }
    public matchUnaryFunctionOp_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_$0_2> {
        return this.regexAccept(String.raw`(?:negate)`, "i", $$dpth + 1, $$cr);
    }
    public matchUnaryFunctionOp_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_$1> {
        return this.memoise(
            () => {
                return this.choice<UnaryFunctionOp_$1>([
                    () => this.matchUnaryFunctionOp_$1_1($$dpth + 1, $$cr),
                    () => this.matchUnaryFunctionOp_$1_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$UnaryFunctionOp_$1$memo,
        );
    }
    public matchUnaryFunctionOp_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_$1_1> {
        return this.matchAtom($$dpth + 1, $$cr);
    }
    public matchUnaryFunctionOp_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<UnaryFunctionOp_$1_2> {
        return this.matchArrayOp($$dpth + 1, $$cr);
    }
    public matchArrayOp($$dpth: number, $$cr?: ErrorTracker): Nullable<ArrayOp> {
        return this.memoise(
            () => {
                return this.run<ArrayOp>($$dpth,
                    () => {
                        let $scope$sequence: Nullable<Sequence>;
                        let $$res: Nullable<ArrayOp> = null;
                        if (true
                            && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                            && ($scope$sequence = this.matchSequence($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new ArrayOp($scope$sequence);
                        }
                        return $$res;
                    });
            },
            this.$scope$ArrayOp$memo,
        );
    }
    public matchSequence($$dpth: number, $$cr?: ErrorTracker): Nullable<Sequence> {
        return this.memoise(
            () => {
                return this.run<Sequence>($$dpth,
                    () => {
                        let $scope$expr: Nullable<Nullable<Expression>>;
                        let $scope$tail: Nullable<Sequence_$0[]>;
                        let $$res: Nullable<Sequence> = null;
                        if (true
                            && (($scope$expr = this.matchExpression($$dpth + 1, $$cr)) || true)
                            && ($scope$tail = this.loop<Sequence_$0>(() => this.matchSequence_$0($$dpth + 1, $$cr), 0, -1)) !== null
                        ) {
                            $$res = new Sequence($scope$expr, $scope$tail);
                        }
                        return $$res;
                    });
            },
            this.$scope$Sequence$memo,
        );
    }
    public matchSequence_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Sequence_$0> {
        return this.memoise(
            () => {
                return this.run<Sequence_$0>($$dpth,
                    () => {
                        let $scope$v: Nullable<Expression>;
                        let $$res: Nullable<Sequence_$0> = null;
                        if (true
                            && this.match_($$dpth + 1, $$cr) !== null
                            && this.regexAccept(String.raw`(?:\,)`, "", $$dpth + 1, $$cr) !== null
                            && this.match_($$dpth + 1, $$cr) !== null
                            && ($scope$v = this.matchExpression($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.Sequence_$0, v: $scope$v};
                        }
                        return $$res;
                    });
            },
            this.$scope$Sequence_$0$memo,
        );
    }
    public matchUnFunctions($$dpth: number, $$cr?: ErrorTracker): Nullable<UnFunctions> {
        return this.memoise(
            () => {
                return this.choice<UnFunctions>([
                    () => this.matchUnFunctions_1($$dpth + 1, $$cr),
                    () => this.matchUnFunctions_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$UnFunctions$memo,
        );
    }
    public matchUnFunctions_1($$dpth: number, $$cr?: ErrorTracker): Nullable<UnFunctions_1> {
        return this.run<UnFunctions_1>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<UnFunctions_1> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:empty)`, "i", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new UnFunctions_1($scope$v);
                }
                return $$res;
            });
    }
    public matchUnFunctions_2($$dpth: number, $$cr?: ErrorTracker): Nullable<UnFunctions_2> {
        return this.run<UnFunctions_2>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<UnFunctions_2> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:notempty)`, "i", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new UnFunctions_2($scope$v);
                }
                return $$res;
            });
    }
    public matchPowerSigns($$dpth: number, $$cr?: ErrorTracker): Nullable<PowerSigns> {
        return this.memoise(
            () => {
                return this.run<PowerSigns>($$dpth,
                    () => {
                        let $scope$v: Nullable<PowerSigns_$0>;
                        let $$res: Nullable<PowerSigns> = null;
                        if (true
                            && ($scope$v = this.matchPowerSigns_$0($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new PowerSigns($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$PowerSigns$memo,
        );
    }
    public matchPowerSigns_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<PowerSigns_$0> {
        return this.memoise(
            () => {
                return this.choice<PowerSigns_$0>([
                    () => this.matchPowerSigns_$0_1($$dpth + 1, $$cr),
                    () => this.matchPowerSigns_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$PowerSigns_$0$memo,
        );
    }
    public matchPowerSigns_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<PowerSigns_$0_1> {
        return this.regexAccept(String.raw`(?:\^)`, "", $$dpth + 1, $$cr);
    }
    public matchPowerSigns_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<PowerSigns_$0_2> {
        return this.regexAccept(String.raw`(?:power)`, "", $$dpth + 1, $$cr);
    }
    public matchMulDivSigns($$dpth: number, $$cr?: ErrorTracker): Nullable<MulDivSigns> {
        return this.memoise(
            () => {
                return this.choice<MulDivSigns>([
                    () => this.matchMulDivSigns_1($$dpth + 1, $$cr),
                    () => this.matchMulDivSigns_2($$dpth + 1, $$cr),
                    () => this.matchMulDivSigns_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$MulDivSigns$memo,
        );
    }
    public matchMulDivSigns_1($$dpth: number, $$cr?: ErrorTracker): Nullable<MulDivSigns_1> {
        return this.run<MulDivSigns_1>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<MulDivSigns_1> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:\*)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new MulDivSigns_1($scope$v);
                }
                return $$res;
            });
    }
    public matchMulDivSigns_2($$dpth: number, $$cr?: ErrorTracker): Nullable<MulDivSigns_2> {
        return this.run<MulDivSigns_2>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<MulDivSigns_2> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:\/)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new MulDivSigns_2($scope$v);
                }
                return $$res;
            });
    }
    public matchMulDivSigns_3($$dpth: number, $$cr?: ErrorTracker): Nullable<MulDivSigns_3> {
        return this.run<MulDivSigns_3>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<MulDivSigns_3> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:\%)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new MulDivSigns_3($scope$v);
                }
                return $$res;
            });
    }
    public matchPlusMinusSigns($$dpth: number, $$cr?: ErrorTracker): Nullable<PlusMinusSigns> {
        return this.memoise(
            () => {
                return this.choice<PlusMinusSigns>([
                    () => this.matchPlusMinusSigns_1($$dpth + 1, $$cr),
                    () => this.matchPlusMinusSigns_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$PlusMinusSigns$memo,
        );
    }
    public matchPlusMinusSigns_1($$dpth: number, $$cr?: ErrorTracker): Nullable<PlusMinusSigns_1> {
        return this.run<PlusMinusSigns_1>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<PlusMinusSigns_1> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:\+)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new PlusMinusSigns_1($scope$v);
                }
                return $$res;
            });
    }
    public matchPlusMinusSigns_2($$dpth: number, $$cr?: ErrorTracker): Nullable<PlusMinusSigns_2> {
        return this.run<PlusMinusSigns_2>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<PlusMinusSigns_2> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:\-)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new PlusMinusSigns_2($scope$v);
                }
                return $$res;
            });
    }
    public matchComparableOperators($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators> {
        return this.memoise(
            () => {
                return this.choice<ComparableOperators>([
                    () => this.matchComparableOperators_1($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_2($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_3($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_4($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_5($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_6($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ComparableOperators$memo,
        );
    }
    public matchComparableOperators_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_1> {
        return this.run<ComparableOperators_1>($$dpth,
            () => {
                let $scope$v: Nullable<ComparableOperators_$0>;
                let $$res: Nullable<ComparableOperators_1> = null;
                if (true
                    && ($scope$v = this.matchComparableOperators_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ComparableOperators_1($scope$v);
                }
                return $$res;
            });
    }
    public matchComparableOperators_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_2> {
        return this.run<ComparableOperators_2>($$dpth,
            () => {
                let $scope$v: Nullable<ComparableOperators_$1>;
                let $$res: Nullable<ComparableOperators_2> = null;
                if (true
                    && ($scope$v = this.matchComparableOperators_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ComparableOperators_2($scope$v);
                }
                return $$res;
            });
    }
    public matchComparableOperators_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_3> {
        return this.run<ComparableOperators_3>($$dpth,
            () => {
                let $scope$v: Nullable<ComparableOperators_$2>;
                let $$res: Nullable<ComparableOperators_3> = null;
                if (true
                    && ($scope$v = this.matchComparableOperators_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ComparableOperators_3($scope$v);
                }
                return $$res;
            });
    }
    public matchComparableOperators_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_4> {
        return this.run<ComparableOperators_4>($$dpth,
            () => {
                let $scope$v: Nullable<ComparableOperators_$3>;
                let $$res: Nullable<ComparableOperators_4> = null;
                if (true
                    && ($scope$v = this.matchComparableOperators_$3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ComparableOperators_4($scope$v);
                }
                return $$res;
            });
    }
    public matchComparableOperators_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_5> {
        return this.run<ComparableOperators_5>($$dpth,
            () => {
                let $scope$v: Nullable<ComparableOperators_$4>;
                let $$res: Nullable<ComparableOperators_5> = null;
                if (true
                    && ($scope$v = this.matchComparableOperators_$4($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ComparableOperators_5($scope$v);
                }
                return $$res;
            });
    }
    public matchComparableOperators_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_6> {
        return this.run<ComparableOperators_6>($$dpth,
            () => {
                let $scope$v: Nullable<ComparableOperators_$5>;
                let $$res: Nullable<ComparableOperators_6> = null;
                if (true
                    && ($scope$v = this.matchComparableOperators_$5($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ComparableOperators_6($scope$v);
                }
                return $$res;
            });
    }
    public matchComparableOperators_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$0> {
        return this.memoise(
            () => {
                return this.choice<ComparableOperators_$0>([
                    () => this.matchComparableOperators_$0_1($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ComparableOperators_$0$memo,
        );
    }
    public matchComparableOperators_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$0_1> {
        return this.regexAccept(String.raw`(?:<=)`, "", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$0_2> {
        return this.regexAccept(String.raw`(?:lessorequal)`, "i", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$1> {
        return this.memoise(
            () => {
                return this.choice<ComparableOperators_$1>([
                    () => this.matchComparableOperators_$1_1($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_$1_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ComparableOperators_$1$memo,
        );
    }
    public matchComparableOperators_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$1_1> {
        return this.regexAccept(String.raw`(?:>=)`, "", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$1_2> {
        return this.regexAccept(String.raw`(?:greaterorequal)`, "i", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$2> {
        return this.memoise(
            () => {
                return this.choice<ComparableOperators_$2>([
                    () => this.matchComparableOperators_$2_1($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_$2_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ComparableOperators_$2$memo,
        );
    }
    public matchComparableOperators_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$2_1> {
        return this.regexAccept(String.raw`(?:==)`, "", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$2_2> {
        return this.regexAccept(String.raw`(?:equal)`, "i", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$3> {
        return this.memoise(
            () => {
                return this.choice<ComparableOperators_$3>([
                    () => this.matchComparableOperators_$3_1($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_$3_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ComparableOperators_$3$memo,
        );
    }
    public matchComparableOperators_$3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$3_1> {
        return this.regexAccept(String.raw`(?:!=)`, "", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$3_2> {
        return this.regexAccept(String.raw`(?:notequal)`, "i", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$4> {
        return this.memoise(
            () => {
                return this.choice<ComparableOperators_$4>([
                    () => this.matchComparableOperators_$4_1($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_$4_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ComparableOperators_$4$memo,
        );
    }
    public matchComparableOperators_$4_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$4_1> {
        return this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$4_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$4_2> {
        return this.regexAccept(String.raw`(?:less)`, "i", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$5> {
        return this.memoise(
            () => {
                return this.choice<ComparableOperators_$5>([
                    () => this.matchComparableOperators_$5_1($$dpth + 1, $$cr),
                    () => this.matchComparableOperators_$5_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ComparableOperators_$5$memo,
        );
    }
    public matchComparableOperators_$5_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$5_1> {
        return this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr);
    }
    public matchComparableOperators_$5_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ComparableOperators_$5_2> {
        return this.regexAccept(String.raw`(?:greater)`, "i", $$dpth + 1, $$cr);
    }
    public matchAndSign($$dpth: number, $$cr?: ErrorTracker): Nullable<AndSign> {
        return this.memoise(
            () => {
                return this.run<AndSign>($$dpth,
                    () => {
                        let $scope$v: Nullable<AndSign_$0>;
                        let $$res: Nullable<AndSign> = null;
                        if (true
                            && ($scope$v = this.matchAndSign_$0($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new AndSign($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$AndSign$memo,
        );
    }
    public matchAndSign_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<AndSign_$0> {
        return this.memoise(
            () => {
                return this.choice<AndSign_$0>([
                    () => this.matchAndSign_$0_1($$dpth + 1, $$cr),
                    () => this.matchAndSign_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$AndSign_$0$memo,
        );
    }
    public matchAndSign_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<AndSign_$0_1> {
        return this.regexAccept(String.raw`(?:\&\&)`, "", $$dpth + 1, $$cr);
    }
    public matchAndSign_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<AndSign_$0_2> {
        return this.regexAccept(String.raw`(?:and)`, "", $$dpth + 1, $$cr);
    }
    public matchOrSign($$dpth: number, $$cr?: ErrorTracker): Nullable<OrSign> {
        return this.memoise(
            () => {
                return this.run<OrSign>($$dpth,
                    () => {
                        let $scope$v: Nullable<OrSign_$0>;
                        let $$res: Nullable<OrSign> = null;
                        if (true
                            && ($scope$v = this.matchOrSign_$0($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new OrSign($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$OrSign$memo,
        );
    }
    public matchOrSign_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<OrSign_$0> {
        return this.memoise(
            () => {
                return this.choice<OrSign_$0>([
                    () => this.matchOrSign_$0_1($$dpth + 1, $$cr),
                    () => this.matchOrSign_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$OrSign_$0$memo,
        );
    }
    public matchOrSign_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<OrSign_$0_1> {
        return this.regexAccept(String.raw`(?:\|\|)`, "", $$dpth + 1, $$cr);
    }
    public matchOrSign_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<OrSign_$0_2> {
        return this.regexAccept(String.raw`(?:or)`, "", $$dpth + 1, $$cr);
    }
    public matchAtom($$dpth: number, $$cr?: ErrorTracker): Nullable<Atom> {
        return this.memoise(
            () => {
                return this.choice<Atom>([
                    () => this.matchAtom_1($$dpth + 1, $$cr),
                    () => this.matchAtom_2($$dpth + 1, $$cr),
                    () => this.matchAtom_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Atom$memo,
        );
    }
    public matchAtom_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Atom_1> {
        return this.run<Atom_1>($$dpth,
            () => {
                let $scope$v: Nullable<Atom_$0>;
                let $$res: Nullable<Atom_1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchAtom_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Atom_1($scope$v);
                }
                return $$res;
            });
    }
    public matchAtom_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Atom_2> {
        return this.run<Atom_2>($$dpth,
            () => {
                let $scope$v: Nullable<ConstValue>;
                let $$res: Nullable<Atom_2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchConstValue($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Atom_2($scope$v);
                }
                return $$res;
            });
    }
    public matchAtom_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Atom_3> {
        return this.run<Atom_3>($$dpth,
            () => {
                let $scope$v: Nullable<ValueInput>;
                let $$res: Nullable<Atom_3> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\{)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchValueInput($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new Atom_3($scope$v);
                }
                return $$res;
            });
    }
    public matchAtom_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Atom_$0> {
        return this.memoise(
            () => {
                return this.choice<Atom_$0>([
                    () => this.matchAtom_$0_1($$dpth + 1, $$cr),
                    () => this.matchAtom_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Atom_$0$memo,
        );
    }
    public matchAtom_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Atom_$0_1> {
        return this.regexAccept(String.raw`(?:undefined)`, "", $$dpth + 1, $$cr);
    }
    public matchAtom_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Atom_$0_2> {
        return this.regexAccept(String.raw`(?:null)`, "", $$dpth + 1, $$cr);
    }
    public matchConstValue($$dpth: number, $$cr?: ErrorTracker): Nullable<ConstValue> {
        return this.memoise(
            () => {
                return this.choice<ConstValue>([
                    () => this.matchConstValue_1($$dpth + 1, $$cr),
                    () => this.matchConstValue_2($$dpth + 1, $$cr),
                    () => this.matchConstValue_3($$dpth + 1, $$cr),
                    () => this.matchConstValue_4($$dpth + 1, $$cr),
                    () => this.matchConstValue_5($$dpth + 1, $$cr),
                    () => this.matchConstValue_6($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ConstValue$memo,
        );
    }
    public matchConstValue_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ConstValue_1> {
        return this.run<ConstValue_1>($$dpth,
            () => {
                let $scope$v: Nullable<LogicValue>;
                let $$res: Nullable<ConstValue_1> = null;
                if (true
                    && ($scope$v = this.matchLogicValue($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ConstValue_1($scope$v);
                }
                return $$res;
            });
    }
    public matchConstValue_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ConstValue_2> {
        return this.run<ConstValue_2>($$dpth,
            () => {
                let $scope$v: Nullable<ArithmeticValue>;
                let $$res: Nullable<ConstValue_2> = null;
                if (true
                    && ($scope$v = this.matchArithmeticValue($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ConstValue_2($scope$v);
                }
                return $$res;
            });
    }
    public matchConstValue_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ConstValue_3> {
        return this.run<ConstValue_3>($$dpth,
            () => {
                let $scope$v: Nullable<LettersAndDigits>;
                let $$res: Nullable<ConstValue_3> = null;
                if (true
                    && ($scope$v = this.matchLettersAndDigits($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ConstValue_3($scope$v);
                }
                return $$res;
            });
    }
    public matchConstValue_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ConstValue_4> {
        return this.run<ConstValue_4>($$dpth,
            () => {
                let $scope$v: Nullable<StringValue>;
                let $$res: Nullable<ConstValue_4> = null;
                if (true
                    && ($scope$v = this.matchStringValue($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ConstValue_4($scope$v);
                }
                return $$res;
            });
    }
    public matchConstValue_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ConstValue_5> {
        return this.run<ConstValue_5>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<ConstValue_5> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:\'\')`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ConstValue_5($scope$v);
                }
                return $$res;
            });
    }
    public matchConstValue_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ConstValue_6> {
        return this.run<ConstValue_6>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<ConstValue_6> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:\"\")`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ConstValue_6($scope$v);
                }
                return $$res;
            });
    }
    public matchArithmeticValue($$dpth: number, $$cr?: ErrorTracker): Nullable<ArithmeticValue> {
        return this.memoise(
            () => {
                return this.run<ArithmeticValue>($$dpth,
                    () => {
                        let $scope$sign: Nullable<string>;
                        let $scope$v: Nullable<Number>;
                        let $$res: Nullable<ArithmeticValue> = null;
                        if (true
                            && ($scope$sign = this.regexAccept(String.raw`(?:[-]?)`, "", $$dpth + 1, $$cr)) !== null
                            && ($scope$v = this.matchNumber($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new ArithmeticValue($scope$sign, $scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$ArithmeticValue$memo,
        );
    }
    public matchLogicValue($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicValue> {
        return this.memoise(
            () => {
                return this.choice<LogicValue>([
                    () => this.matchLogicValue_1($$dpth + 1, $$cr),
                    () => this.matchLogicValue_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$LogicValue$memo,
        );
    }
    public matchLogicValue_1($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicValue_1> {
        return this.run<LogicValue_1>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<LogicValue_1> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:true)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new LogicValue_1($scope$v);
                }
                return $$res;
            });
    }
    public matchLogicValue_2($$dpth: number, $$cr?: ErrorTracker): Nullable<LogicValue_2> {
        return this.run<LogicValue_2>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<LogicValue_2> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:false)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new LogicValue_2($scope$v);
                }
                return $$res;
            });
    }
    public matchValueInput($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueInput> {
        return this.memoise(
            () => {
                return this.run<ValueInput>($$dpth,
                    () => {
                        let $scope$chars: Nullable<[ValueCharacters, ...ValueCharacters[]]>;
                        let $$res: Nullable<ValueInput> = null;
                        if (true
                            && ($scope$chars = this.loopPlus<ValueCharacters>(() => this.matchValueCharacters($$dpth + 1, $$cr))) !== null
                        ) {
                            $$res = new ValueInput($scope$chars);
                        }
                        return $$res;
                    });
            },
            this.$scope$ValueInput$memo,
        );
    }
    public matchValueCharacters($$dpth: number, $$cr?: ErrorTracker): Nullable<ValueCharacters> {
        return this.memoise(
            () => {
                return this.run<ValueCharacters>($$dpth,
                    () => {
                        let $scope$v: Nullable<string>;
                        let $$res: Nullable<ValueCharacters> = null;
                        if (true
                            && ($scope$v = this.regexAccept(String.raw`(?:[^\{\}])`, "", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new ValueCharacters($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$ValueCharacters$memo,
        );
    }
    public matchNumber($$dpth: number, $$cr?: ErrorTracker): Nullable<Number> {
        return this.memoise(
            () => {
                return this.choice<Number>([
                    () => this.matchNumber_1($$dpth + 1, $$cr),
                    () => this.matchNumber_2($$dpth + 1, $$cr),
                    () => this.matchNumber_3($$dpth + 1, $$cr),
                    () => this.matchNumber_4($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Number$memo,
        );
    }
    public matchNumber_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Number_1> {
        return this.run<Number_1>($$dpth,
            () => {
                let $scope$v1: Nullable<Digits>;
                let $scope$v2: Nullable<Digits>;
                let $$res: Nullable<Number_1> = null;
                if (true
                    && ($scope$v1 = this.matchDigits($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$v2 = this.matchDigits($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Number_1($scope$v1, $scope$v2);
                }
                return $$res;
            });
    }
    public matchNumber_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Number_2> {
        return this.run<Number_2>($$dpth,
            () => {
                let $scope$v1: Nullable<NonZeroDigits>;
                let $scope$v2: Nullable<Nullable<Digits>>;
                let $$res: Nullable<Number_2> = null;
                if (true
                    && ($scope$v1 = this.matchNonZeroDigits($$dpth + 1, $$cr)) !== null
                    && (($scope$v2 = this.matchDigits($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new Number_2($scope$v1, $scope$v2);
                }
                return $$res;
            });
    }
    public matchNumber_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Number_3> {
        return this.run<Number_3>($$dpth,
            () => {
                let $scope$v: Nullable<HexDigits>;
                let $$res: Nullable<Number_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:0x)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchHexDigits($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Number_3($scope$v);
                }
                return $$res;
            });
    }
    public matchNumber_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Number_4> {
        return this.run<Number_4>($$dpth,
            () => {
                let $scope$v: Nullable<string>;
                let $$res: Nullable<Number_4> = null;
                if (true
                    && ($scope$v = this.regexAccept(String.raw`(?:0)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Number_4($scope$v);
                }
                return $$res;
            });
    }
    public matchStringValue($$dpth: number, $$cr?: ErrorTracker): Nullable<StringValue> {
        return this.memoise(
            () => {
                return this.run<StringValue>($$dpth,
                    () => {
                        let $scope$v: Nullable<string>;
                        let $$res: Nullable<StringValue> = null;
                        if (true
                            && this.matchStringQuoute($$dpth + 1, $$cr) !== null
                            && ($scope$v = this.regexAccept(String.raw`(?:[^\"\']+)`, "", $$dpth + 1, $$cr)) !== null
                            && this.matchStringQuoute($$dpth + 1, $$cr) !== null
                        ) {
                            $$res = new StringValue($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$StringValue$memo,
        );
    }
    public matchLettersAndDigits($$dpth: number, $$cr?: ErrorTracker): Nullable<LettersAndDigits> {
        return this.memoise(
            () => {
                return this.run<LettersAndDigits>($$dpth,
                    () => {
                        let $scope$v: Nullable<string>;
                        let $$res: Nullable<LettersAndDigits> = null;
                        if (true
                            && ($scope$v = this.regexAccept(String.raw`(?:[0-9a-zA-Z_]+)`, "", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new LettersAndDigits($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$LettersAndDigits$memo,
        );
    }
    public matchHexDigits($$dpth: number, $$cr?: ErrorTracker): Nullable<HexDigits> {
        return this.memoise(
            () => {
                return this.run<HexDigits>($$dpth,
                    () => {
                        let $scope$v: Nullable<string>;
                        let $$res: Nullable<HexDigits> = null;
                        if (true
                            && ($scope$v = this.regexAccept(String.raw`(?:[0-9a-f]+)`, "i", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new HexDigits($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$HexDigits$memo,
        );
    }
    public matchDigits($$dpth: number, $$cr?: ErrorTracker): Nullable<Digits> {
        return this.memoise(
            () => {
                return this.run<Digits>($$dpth,
                    () => {
                        let $scope$v: Nullable<string>;
                        let $$res: Nullable<Digits> = null;
                        if (true
                            && ($scope$v = this.regexAccept(String.raw`(?:[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new Digits($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$Digits$memo,
        );
    }
    public matchNonZeroDigits($$dpth: number, $$cr?: ErrorTracker): Nullable<NonZeroDigits> {
        return this.memoise(
            () => {
                return this.run<NonZeroDigits>($$dpth,
                    () => {
                        let $scope$v: Nullable<string>;
                        let $$res: Nullable<NonZeroDigits> = null;
                        if (true
                            && ($scope$v = this.regexAccept(String.raw`(?:[1-9]+)`, "", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new NonZeroDigits($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$NonZeroDigits$memo,
        );
    }
    public matchStringQuoute($$dpth: number, $$cr?: ErrorTracker): Nullable<StringQuoute> {
        return this.memoise(
            () => {
                return this.run<StringQuoute>($$dpth,
                    () => {
                        let $scope$v: Nullable<string>;
                        let $$res: Nullable<StringQuoute> = null;
                        if (true
                            && ($scope$v = this.regexAccept(String.raw`(?:[\"|\'])`, "", $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new StringQuoute($scope$v);
                        }
                        return $$res;
                    });
            },
            this.$scope$StringQuoute$memo,
        );
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[ \t\n\r]*)`, "", $$dpth + 1, $$cr);
            },
            this.$scope$_$memo,
        );
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchRoot(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<Root>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}